import unittest

import tempfile
import shutil
import os
import csv
import pandas as pd

from plot_roc import WekaClassifierExecution
from plot_roc import WekaClassifierThresholdFile
from plot_roc import WekaClassifierTester
from plot_roc import WekaClassifierBuilder
from plot_roc import WekaClassifierFullExecution
from plot_roc import WekaClassifiersSummaryCSVWriter
from plot_roc import WekaROCChartBuilder

class TestFullSingleClassifier(unittest.TestCase):
    """
    Test if the files generated by a single classifier build (naive bayes in this case),
    are consistent with what should be generated
    """

    def setUp(self):
        # Create a temp dir to keep the files produced by Weka.
        self.experiment_dir = tempfile.mkdtemp()

    def tearDown(self):
        # Clean all the directory with the files
        shutil.rmtree(self.experiment_dir)

    def test_classifier_with_success(self):
        config = {
          'name': 'Naive Bayes',
          'token': 'naive-bayes',
          'algorithm': 'weka.classifiers.bayes.NaiveBayes',
          'command-line': 'weka.classifiers.bayes.NaiveBayes'}

        # The builder not create the classifier dir inside experiment dir
        # So create it before create the classifier
        classifier_dir = self.experiment_dir + "/" + config['token']

        os.mkdir(classifier_dir)

        # Start to create the classifier with the dataset
        builder = WekaClassifierBuilder(experiment_dir = self.experiment_dir, classifier = config)

        command = builder.train_command(
            weka_lib = "/Applications/weka-3-8-1-oracle-jvm.app/Contents/Java/weka.jar",
            train_file = "dataset-a.csv")

        train_execution = builder.execute(command)

        tester = WekaClassifierTester(experiment_dir = self.experiment_dir, classifier = config)

        weka_lib = "/Applications/weka-3-8-1-oracle-jvm.app/Contents/Java/weka.jar"
        summary_command, per_instance_command = tester.test_command(
            weka_lib = "/Applications/weka-3-8-1-oracle-jvm.app/Contents/Java/weka.jar",
            test_file = "dataset-b.csv")

        test_execution = tester.execute(summary_command, per_instance_command)

        fullExecution = WekaClassifierFullExecution(train_execution, test_execution)

        csvWriter = WekaClassifiersSummaryCSVWriter([0.9, 0.8])
        csvWriter.add_classifier(fullExecution)

        csvWriter.write_to_file(self.experiment_dir + "/summary.csv")

        roc_builder = WekaROCChartBuilder(title = "ROC for test classifier")
        roc_builder.add_classifier(test_execution)
        roc_builder.add_classifier(train_execution)
        roc_builder.write_to_file(file_location = classifier_dir + "/naive-bayes.pdf")

        csv_file = open(self.experiment_dir + "/summary.csv", 'r')
        csv_file = csv_file.read()
        csv_rows = [row for row in csv.reader(csv_file.splitlines())]

        self.assertEqual(csv_rows[0], ['Classificador', 'AROC', '90%', '80%', 'Train Command', 'Test Command'])

        self.assertEqual(csv_rows[1][0], 'naive-bayes')
        self.assertEqual(csv_rows[1][1], '0.912')
        self.assertEqual(csv_rows[1][2], '0.758')
        self.assertEqual(csv_rows[1][3], '0.848')

        train_command = csv_rows[1][4].split(" ")

        self.assertEqual(train_command[0], 'java')
        self.assertEqual(train_command[1], '-cp')
        self.assertEqual(train_command[2], weka_lib)
        self.assertEqual(train_command[3], 'weka.Run')
        self.assertEqual(train_command[4], 'weka.classifiers.bayes.NaiveBayes')
        self.assertEqual(train_command[5], '-t')
        self.assertEqual(train_command[6], 'dataset-a.csv')
        self.assertEqual(train_command[7], '-d')
        self.assertEqual(train_command[8], classifier_dir + '/naive-bayes.model')
        self.assertEqual(train_command[9], '-threshold-file')
        self.assertEqual(train_command[10], classifier_dir + '/train.curve.arff.csv')
        self.assertEqual(train_command[11], '-threshold-label')
        self.assertEqual(train_command[12], 'G')

        test_command = csv_rows[1][5].split(" ")

        self.assertEqual(test_command[0], 'java')
        self.assertEqual(test_command[1], '-cp')
        self.assertEqual(test_command[2], weka_lib)
        self.assertEqual(test_command[3], 'weka.Run')
        self.assertEqual(test_command[4], 'weka.classifiers.bayes.NaiveBayes')
        self.assertEqual(test_command[5], '-l')
        self.assertEqual(test_command[6], classifier_dir + '/naive-bayes.model')
        self.assertEqual(test_command[7], '-T')
        self.assertEqual(test_command[8], 'dataset-b.csv')
        self.assertEqual(test_command[9], '-classifications')
        self.assertEqual(test_command[10], 'weka.classifiers.evaluation.output.prediction.PlainText')
        self.assertEqual(test_command[11], '-threshold-file')
        self.assertEqual(test_command[12], classifier_dir + '/test.curve.arff.csv')
        self.assertEqual(test_command[13], '-threshold-label')
        self.assertEqual(test_command[14], 'G')

        self.assertTrue(os.path.isfile(classifier_dir + '/naive-bayes.model'))
        self.assertTrue(os.path.isfile(classifier_dir + '/naive-bayes.pdf'))
        self.assertTrue(os.path.isfile(classifier_dir + '/train.curve.arff.csv'))
        self.assertTrue(os.path.isfile(classifier_dir + '/test.curve.arff.csv'))
        
